version: '3.6'
services:
  postgres:
    image: postgres:12
    ports:
    - "5433:5432"
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
  graphql-engine:
    image: hasura/graphql-engine:v2.4.0
    ports:
    - "8081:8080"
    depends_on:
    - "postgres"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
  client:
    tty: true
    stdin_open: true
    image: tooljet/tooljet-client-ce:latest
    restart: always
    env_file: .env
    depends_on:
      - server
    volumes:
      - logs:/var/log/openresty/
      - certs:/etc/resty-auto-ssl/
      - fallbackcerts:/etc/fallback-certs
    ports:
      - 80:80
      - 443:443
    command: openresty -g "daemon off;"
  server:
    image: tooljet/tooljet-server-ce:latest
    tty: true
    stdin_open: true
    restart: always
    ports:
      - 3000
    env_file: .env
    environment:
      SERVE_CLIENT: "false"
    command: npm run start:prod
    depends_on:
      - postgres
volumes:
  db_data:
  certs:
  logs:
  fallbackcerts:

