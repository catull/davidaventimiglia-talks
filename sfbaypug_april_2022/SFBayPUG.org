#+TITLE: Hasura GraphQL for PostgreSQL
#+AUTHOR: David A Ventimiglia
#+EMAIL: davidaventimiglia@gmail.com

#+options: timestamp:nil title:t toc:nil todo:t |:t

* Who

#+BEGIN_QUOTE
I'm a physicist, software engineer, data engineer, and data scientist
with 25 years of experience building systems. I believe the art of
coding like the art of writing lies in thrift. The best code is the
code you don't have to write.
#+END_QUOTE

#+REVEAL: split

- David A. Ventimiglia
- [[mailto:davidaventimiglia@gmail.com][davidaventimiglia@gmail.com]]
- [[mailto:davidaventimiglia@neptunestation.com][davidaventimiglia@neptunestation.com]]
- [[mailto:davidaventimiglia@hasura.io][davidaventimiglia@hasura.io]]
- [[https://twitter.com/TheRealDventimi][=@TheRealDventimi=]]
- [[https://twitter.com/Neptune_Station][=@neptune_station=]]
- [[https://neptunestation.com/][=neptunestation.com=]]

* What

#+REVEAL: split

#+begin_quote
From your databases to a unified GraphQL API in just one minute
#+end_quote

* What?

** GraphQL API

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
- Query Language
- Schema
  - Types
    - Fields
- Types relate to Types
- Sound familiar?
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%;">
#+ATTR_HTML: :width 100%
#+ATTR_HTML: :height 100%
[[file:GraphQL.png]]
#+REVEAL_HTML: </div>

** In Just One Minute
#+ATTR_HTML: :width 50%
#+ATTR_HTML: :height 50%
[[file:Hasura_Connections.png]]

* Why?

** Two-Tier

- 1986-1996
- Client + Server
- Visual Basic + MSSQL + SQL

** Three-Tier

- 1996-1999
- Presentation + Application + Data
- HTML + Java + EJBs + ORM + Oracle (+ SQL)

** N-Tier

- 1999-2002
- Client + WAF + Business Logic + Messaging + Loads of Caching + Data
- HTML/Javascript + Ninx + Ruby + Rails + RabbitMQ + Redis + ActiveRecord + MySQL (+ SQL)

** SOA

- 2002-2012
- UI + WSDL + SOAP + Event Busses + POJOs + ORM + Data
- HTML/Javascipt + JAX-WS + Java + Spring + Hibernate + Oracle (+ SQL)

** Microservices

- 2012-???
- UI + REST
- HTML/Javascript/TypeScript/Angular/React + AWS DynamoDB + Python + Flask + API Endpoints + SQLAlchemy + ECS + MySQL (+ SQL)

** Containerization

- 2013-???
- Clients + Containers
- UI (whatever) + Docker + AWS ECS/EKS + Linkerd + AWS Aurora + AWS RDS (+ SQL)

** Serverless

- 2014-???
- UI
- SPA / Mobile + AWS Lambda + AWS Aurora (+ SQL)

** Low-Code

- 2017-???
- UI
- React / Flutter + Hasura + PostgreSQL + SQL!

#+ATTR_HTML: :width 25%
#+ATTR_HTML: :height 25%
[[file:clipart2825061.png]]

** No-Code

- 2018-???
- UI
- Glide + AirTable
  
* Demo

** Databases

    - PostgreSQL
    - MS SQL Server
    - Big Query
    - Oracle
    - MongoDB
    - MySQL
    - ElasticSearch

** Schema

    - Introspection
    - Documentation

** Remote Schema

    - Remote Joins

** Explorer

** API

    - GraphQL
    - Relay
    - REST
    - Metadata
    - Version
    - Healthcheck
    - PG Dump
    - Config
    - Explain

** Subscriptions

** Event Triggers

** Actions

** Migrations

** Miscellaneous

    - Metadata
    - Version
    - Healthcheck
    - PG Dump
    - Config
    - Explain
    - Migrations
    - Metadata
    - CLI
    - Caching
    - Security
    - Monitoring

* Discussion

