#+TITLE: Write Less Code
#+SUBTITLE: Cloud Native Data Access
#+AUTHOR: David A. Ventimiglia
#+EMAIL: davidaventimiglia@hasura.io

#+options: timestamp:nil title:t toc:nil todo:t |:t num:nil author:nil

#+REVEAL_DEFAULT_SLIDE_BACKGROUND: ./assets/slide_background.png
#+REVEAL_INIT_OPTIONS: transition:'none', controlsLayout:'edges', progress:false, controlsTutorial:false
#+REVEAL_THEME: black
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./assets/slide_background.png
#+REVEAL_PLUGINS: (highlight)

* Who

[[mailto:davidaventimiglia@hasura.io][davidaventimiglia@hasura.io]]

#+BEGIN_QUOTE
"I'm a physicist, data scientist, data engineer, and software
engineer.  I work for [[https://hasura.io/][*Hasura*]], a software technology company that
provides developer-focused tooling products.  And, I believe that the
best code is the code that you don't have to write."
#+END_QUOTE

* What

#+REVEAL: split

#+begin_quote
"From your databases to a unified GraphQL API in just one minute"
#+end_quote

#+ATTR_REVEAL: :frag roll-in
Hasura marketing copy

* What?

** GraphQL API

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

- Query Language
- Schema
  - Types
    - Fields
- Types relate to Types
- Sound familiar?

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%;">

#+ATTR_HTML: :width 100%
#+ATTR_HTML: :height 100%
[[file:assets/GraphQL.png]]

#+REVEAL_HTML: </div>

** In Just One Minute

#+ATTR_HTML: :width 50%
#+ATTR_HTML: :height 50%
[[file:assets/Hasura_Connections.png]]

#+REVEAL: split

[[file:assets/what_is_hasura.png]]

* Why?

** [[https://en.wikipedia.org/wiki/Client%E2%80%93server_model][Two-Tier]]

#+ATTR_REVEAL: :frag (roll-in)
- 1986-1996
- Client + Server
- Visual Basic + MSSQL + SQL

** [[https://www.ibm.com/cloud/learn/three-tier-architecture][Three-Tier]]

#+ATTR_REVEAL: :frag (roll-in)
- 1996-1999
- Presentation + Application + Data
- JSPs + EJBs + ORM + Oracle (+ SQL)

** [[https://en.wikipedia.org/wiki/Multitier_architecture][N-Tier]]

#+ATTR_REVEAL: :frag (roll-in)
- 1999-2002
- Client + WAF + Business Logic + Messaging + Loads of Caching + Data
- HTML/Javascript + Nginx + Ruby + Rails + RabbitMQ + Redis + ActiveRecord + MySQL (+ SQL)

** [[https://en.wikipedia.org/wiki/Service-oriented_architecture][SOA]]

#+ATTR_REVEAL: :frag (roll-in)
- 2002-2012
- UI + WSDL + SOAP + Event Bus + POJOs + ORM + Data
- HTML/Javascript + JAX-WS + Java + Spring + Hibernate + Oracle (+ SQL)

** [[https://en.wikipedia.org/wiki/Microservices][Microservices]]

#+ATTR_REVEAL: :frag (roll-in)
- 2012-???
- UI + REST
- HTML/Javascript/TypeScript/Angular/React + AWS DynamoDB + Python + Flask + API Endpoints + SQLAlchemy + ECS + MySQL (+ SQL)

** [[https://en.wikipedia.org/wiki/Containerization_(computing)][Containerization]]

#+ATTR_REVEAL: :frag (roll-in)
- 2013-???
- Clients + Containers
- Angular + Docker + AWS ECS/EKS + Linkerd + AWS RDS (+ SQL)

** [[https://en.wikipedia.org/wiki/Serverless_computing][Serverless]]

#+ATTR_REVEAL: :frag (roll-in)
- 2014-???
- UI + Functions
- SPA / Mobile + API Gateway + AWS Lambda + AWS Aurora (+ SQL)

** [[https://www.thoughtworks.com/insights/decoder/l/low-code][Low-Code]]

#+REVEAL_HTML: <div class="column" style="float:left; width:80%">
#+ATTR_REVEAL: :frag (roll-in)
- 2017-???
- UI + Database
- React / Flutter + Hasura + PostgreSQL + SQL!
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:20%">
#+ATTR_REVEAL: :frag roll-in
[[file:assets/clipart2825061.png]]
#+REVEAL_HTML: </div>

** [[https://www.thoughtworks.com/insights/podcasts/pragmatism-in-practice/no-code-platforms][No-Code]]

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

#+ATTR_REVEAL: :frag (roll-in)
- 2018-???
- UI + Spreadsheet
- [[https://www.glideapps.com/][Glide]] + [[https://www.airtable.com/][AirTable]]

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%">
#+ATTR_REVEAL: :frag roll-in
#+ATTR_HTML: :width 25%
#+ATTR_HTML: :height 25%
[[file:assets/Glide-symbol-white.png]]
#+ATTR_REVEAL: :frag roll-in
#+ATTR_HTML: :width 25%
#+ATTR_HTML: :height 25%
[[file:assets/pngwing.com.png]]
#+REVEAL_HTML: </div>
  
* How

#+REVEAL: split

#+REVEAL_HTML: <div class="column" style="float:left; width:75%">
#+BEGIN_QUOTE
"Show me your flowcharts and conceal your tables, and I shall continue
to be mystified. Show me your tables, and I won't usually need your
flowcharts; they'll be obvious."
#+END_QUOTE
#+ATTR_REVEAL: :frag roll-in
Fred Brooks in "The Mythical Man-Month" (1975)
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:25%">
#+ATTR_REVEAL: :frag roll-in
[[file:assets/Mythical_man-month_(book_cover).jpg]]
#+REVEAL_HTML: </div>

#+REVEAL: split

#+REVEAL_HTML: <div class="column" style="float:left; width:75%">
#+BEGIN_QUOTE
"Any sufficiently complicated C or Fortran program contains an ad hoc,
informally-specified, bug-ridden, slow implementation of half of
Common Lisp."
#+END_QUOTE
#+ATTR_REVEAL: :frag roll-in
Philip Greenspun in "Greenspun's 10th Rule of Programming" (1993)
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:25%">
#+ATTR_REVEAL: :frag roll-in
[[file:assets/greenspun.jpg]]
#+REVEAL_HTML: </div>
#+REVEAL: split

#+REVEAL_HTML: <div class="column" style="float:left; width:75%">
#+BEGIN_QUOTE
"What are you actually doing when you use a typical web application?"
#+END_QUOTE
#+ATTR_REVEAL: :frag roll-in
Benoit Ranque at Hasura (the day he interviewed me)
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:25%">
#+ATTR_REVEAL: :frag roll-in
[[file:assets/benoit.jpg]]
#+REVEAL_HTML: </div>
#+REVEAL: split

#+REVEAL: split

#+REVEAL_HTML: <div class="column" style="float:left; width:75%">
#+BEGIN_QUOTE
"What are you actually doing when you write a typical program?"
#+END_QUOTE
#+ATTR_REVEAL: :frag roll-in
Me here (now)
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:25%">
#+ATTR_REVEAL: :frag roll-in
[[file:assets/dventimi.jpg]]
#+REVEAL_HTML: </div>

#+REVEAL: split

#+REVEAL_HTML: <div class="column" style="float:left; width:75%">
#+BEGIN_QUOTE
"PL/SQL isn't a *real* programming language"
#+END_QUOTE
#+ATTR_REVEAL: :frag roll-in
+redacted+ (last week)
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:25%">
#+ATTR_REVEAL: :frag roll-in
[[file:assets/question_mark_profile.jpg]]
#+REVEAL_HTML: </div>

*** Typical Data Containers

#+ATTR_REVEAL: :frag (roll-in)
- Variables
- Arrays
- Lists
- Maps

*** Typical Data Container

#+ATTR_REVEAL: :frag (roll-in)
Collections

*** Typical Relational Database

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

#+ATTR_REVEAL: :frag (roll-in)
- Efficient Storage
- Huge Volumes
- Fast Access
- Indexes
- Joins

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%">

#+ATTR_REVEAL: :frag (roll-in)
- Constraints
- Flexible Language
- Access Control
- Unified Data Model
- Concurrency

#+REVEAL_HTML: </div>

*** Typical Business Logic

#+ATTR_REVEAL: :frag (roll-in)
- Input Validation
- Data Transformations
- Side Effects

*** Typical Business Logic

#+ATTR_REVEAL: :frag (roll-in)
State Machine

*** Typical Business Logic

#+ATTR_REVEAL: :frag (roll-in)
Function Evaluation over data (after finding the data)

* How?

*** [[https://www.thoughtworks.com/en-us/radar][=ADOPT=]] Declarative Programming üèÅ

#+ATTR_REVEAL: :frag (roll-in)
- Tables, Schema, Views
- Data types (Custom, Enumerated, Range, etc.)
- Permissions
- Constraints (Unique, Foreign, Check)
- Row Security Policies
- Defaults
- +Assertions+ Triggers

*** [[https://www.thoughtworks.com/en-us/radar][=HOLD=]] Procedural Programming üõë

#+ATTR_REVEAL: :frag (roll-in)
+Stored Procedures+

* Demo

* Hasura Product Features

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

#+ATTR_REVEAL: :frag (roll-in)
- GraphQL API
- +Relay API+
- PostgreSQL
- +MS SQL Server+
- +BigQuery+
- +Actions+
- +Remote Schemas+

#+REVEAL_HTML: </div>
  
#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

#+ATTR_REVEAL: :frag (roll-in)
- Event Triggers
- +Scheduled Triggers+
- +Authentication+
- Authorization
- +Database Migrations+
- +CLI+

#+REVEAL_HTML: </div>

* Honorable Mentions

#+REVEAL_HTML: <div class="row">

- [[https://www.graphile.org/postgraphile/][PostGraphile]]
- [[https://www.prisma.io/][Prisma]]
- [[https://github.com/supabase/pg_graphql][=pg_graphql=]]
- [[https://postgrest.org/en/stable/][PostgREST]]

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="row">

#+ATTR_HTML: :width 25%
#+ATTR_HTML: :height 25%
#+ATTR_HTML: :style float:left
#+ATTR_HTML: :margin 10px
[[file:assets/postgraphile.png]]

#+ATTR_HTML: :width 15%
#+ATTR_HTML: :height 15%
#+ATTR_HTML: :style float:left
#+ATTR_HTML: :margin 10px
[[file:assets/prisma_logo-freelogovectors.net_.png]]

#+ATTR_HTML: :width 15%
#+ATTR_HTML: :height 15%
#+ATTR_HTML: :style float:right
#+ATTR_HTML: :margin 10px
[[file:assets/supabase.jpg]]

#+ATTR_HTML: :width 25%
#+ATTR_HTML: :height 25%
#+ATTR_HTML: :style float:right
#+ATTR_HTML: :margin 10px
[[file:assets/postgrest.png]]

#+REVEAL_HTML: </div>

* How to Write Less Code?

#+ATTR_REVEAL: :frag (roll-in)
1. Grant that SQL isn't a "real" programming language.
2. Write your application in SQL anyway.
3. Profit! ü§ë

* Concluding Remarks

#+REVEAL_HTML: <div class="column" style="float:left; width:75%">

#+begin_quote
"Simplicity is a great virtue but it requires hard work to achieve it
and education to appreciate it. And to make matters worse: complexity
sells better." -- Edsger W. Dijkstra in "On the nature of Computing
Science" (1984)
#+end_quote

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:25%">

[[file:qr.png]]

[[file:assets/hasura-logo-primary-light.png]]

#+REVEAL_HTML: </div>

* Additional Slides

*** Objections

#+ATTR_REVEAL: :frag (roll-in)
- Too many stored procedures :: don't use stored procedures
- SQL isn't a real programming language :: so what?
- Developers aren't trained to use SQL :: so train them
- Code is spread all around :: it's confined to the database

*** Objections

#+ATTR_REVEAL: :frag (roll-in)
- Can't scale the DB horizontally :: sure you can
- Can't scale the DB horizontally :: code is not the bottleneck
- Hard to switch the DB :: no it isn't
- Hard to switch the DB :: it's hard to switch programming languages

*** Objections

#+ATTR_REVEAL: :frag (roll-in)
- Relational DBs are slow :: absolutely not
- Stored procedure languages are horrible :: no they're not
- Stored procedure languages are horrible :: use Java, Python, or Javascript
- Can't do TDD :: sure you can
