# -*- mode: org; -*-

#+STARTUP: indent

#+title: Hasura Training
#+author: David A. Ventimiglia
#+email: davidaventimiglia@hasura.io

#+options: timestamp:nil title:t toc:nil todo:t |:t num:nil author:nil

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_DEFAULT_SLIDE_BACKGROUND: ./slide_background.png
#+REVEAL_INIT_OPTIONS: transition:'none', controlsLayout:'edges', progress:false, controlsTutorial:false
#+REVEAL_THEME: black
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./slide_background.png
#+REVEAL_PLUGINS: (highlight)

* 
#+CAPTION: https://tinyurl.com/mvf2ecee
#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:qr.png]]

* What We Will Need

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

#+ATTR_HTML: :width 90%
#+ATTR_HTML: :height 90%
[[file:log_into_hasura_cloud.png]]

http://cloud.hasura.io

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:40%;">

#+ATTR_HTML: :width 80%
#+ATTR_HTML: :height 80%
[[file:log_into_heroku.png]]

https://www.heroku.com/

#+REVEAL_HTML: </div>

* What We Will Need (Optional)

#+ATTR_HTML: :width 80%
#+ATTR_HTML: :height 80%
[[file:app-shot.png]]

https://altairgraphql.dev/

* What We Will Cover

- What is GraphQL?
- What is Hasura?
- How do we use them?
- How do we use them well?
- What are the general principles?
- What are the particular details?
- What is the proper mental model?
- How do we get there?

* What is GraphQL?

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

- Query Language
- Schema
  - Types
    - Fields
- Types relate to Types
- Sound familiar?

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%;">

#+ATTR_HTML: :width 100%
#+ATTR_HTML: :height 100%
[[file:GraphQL.png]]

#+REVEAL_HTML: </div>

* What is Hasura?

- API Server
- Development Environment

* How do we use them?

- Build network applications /*faster*/, more /*reliably*/, and /*cheaper*/ with GraphQL.
- Build GraphQL applications /*faster*/, more /*reliably*/, and /*cheaper*/ with Hasura.
- Apply the general principles with training from /*Hasura Developer Relations*/.
- Apply the particular details with support from /*Hasura Developer Success*/.

* How do we use them well?

- Adopt a principled approach.
- Develop a proper mental model.

* What are the general principles?

1. Build for /humans/.
2. Build with /personas/.
3. Build /in/ the database.
4. Build a /data model/.
5. /Remember/ OLTP vs OLAP.

* What is the proper mental model?

- Hasura ~graphql-engine~ is the API server, is on the data plane, and is on the critical path.
- Hasura ~console~ is part of the development environment, is on the control plane, and is off the critical path.
- Hasura ~CLI~ is part of the development environment, is on the control plane, and is far off the critical path.

* What is the proper mental model?

- The key /functional/ concerns are: data modeling, API development, security, and integrations.
- The key /non-functional/ concerns are: deployment, caching, monitoring.

* Pre-Work

** Step 1:  Log into Neon

#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:log_into_heroku.png]]

** Step 2:  Log into Hasura Cloud

#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:log_into_hasura_cloud.png]]

** Step 3:  Connect Neon to Hasura Cloud

#+ATTR_HTML: :width 80%
#+ATTR_HTML: :height 80%
[[file:connect_heroku_hasura.png]]

** Step 4:  Create a new Hasura Cloud Project

#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:create_new_hasura_project.png]]

** Step 5:  Create a new Neon database

#+ATTR_HTML: :width 80%
#+ATTR_HTML: :height 80%
[[file:create_database.png]]

** Step 6:  Create the Data Model

[[https://tinyurl.com/4vvue9vk]]

#+begin_src sql
-- -*- sql-product: postgres; -*-

CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- account table

CREATE TABLE "public"."account" ("id" uuid NOT NULL DEFAULT gen_random_uuid(), "name" text NOT NULL, "created_at" timestamptz NOT NULL DEFAULT now(), "updated_at" timestamptz NOT NULL DEFAULT now(), PRIMARY KEY ("id") );
CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updated_at"()
  RETURNS TRIGGER AS $$
  DECLARE
    _new record;
  BEGIN
    _new := NEW;
    _new."updated_at" = NOW();
    RETURN _new;
  END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER "set_public_account_updated_at"
  BEFORE UPDATE ON "public"."account"
  FOR EACH ROW
  EXECUTE PROCEDURE "public"."set_current_timestamp_updated_at"();
COMMENT ON TRIGGER "set_public_account_updated_at" ON "public"."account" 
  IS 'trigger to set value of column "updated_at" to current timestamp on row update';

-- product table

CREATE TABLE "public"."product" ("id" uuid NOT NULL DEFAULT gen_random_uuid(), "created_at" timestamptz NOT NULL DEFAULT now(), "updated_at" timestamptz NOT NULL DEFAULT now(), "name" text NOT NULL, "price" integer NOT NULL, PRIMARY KEY ("id") );
CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updated_at"()
  RETURNS TRIGGER AS $$
  DECLARE
    _new record;
  BEGIN
    _new := NEW;
    _new."updated_at" = NOW();
    RETURN _new;
  END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER "set_public_product_updated_at"
  BEFORE UPDATE ON "public"."product"
  FOR EACH ROW
  EXECUTE PROCEDURE "public"."set_current_timestamp_updated_at"();
COMMENT ON TRIGGER "set_public_product_updated_at" ON "public"."product" 
  IS 'trigger to set value of column "updated_at" to current timestamp on row update';

-- order table

CREATE TABLE "public"."order" ("id" uuid NOT NULL DEFAULT gen_random_uuid(), "created_at" timestamptz NOT NULL DEFAULT now(), "updated_at" timestamptz NOT NULL DEFAULT now(), "account_id" uuid NOT NULL, PRIMARY KEY ("id") , FOREIGN KEY ("account_id") REFERENCES "public"."account"("id") ON UPDATE restrict ON DELETE restrict);
CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updated_at"()
  RETURNS TRIGGER AS $$
  DECLARE
    _new record;
  BEGIN
    _new := NEW;
    _new."updated_at" = NOW();
    RETURN _new;
  END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER "set_public_order_updated_at"
  BEFORE UPDATE ON "public"."order"
  FOR EACH ROW
  EXECUTE PROCEDURE "public"."set_current_timestamp_updated_at"();
COMMENT ON TRIGGER "set_public_order_updated_at" ON "public"."order" 
  IS 'trigger to set value of column "updated_at" to current timestamp on row update';

create index on "order" (account_id);

-- order_detail table

CREATE TABLE "public"."order_detail" ("id" uuid NOT NULL DEFAULT gen_random_uuid(), "created_at" timestamptz NOT NULL DEFAULT now(), "updated_at" timestamptz NOT NULL DEFAULT now(), "units" integer NOT NULL, "order_id" uuid NOT NULL, "product_id" uuid NOT NULL, PRIMARY KEY ("id") , FOREIGN KEY ("order_id") REFERENCES "public"."order"("id") ON UPDATE restrict ON DELETE restrict, FOREIGN KEY ("product_id") REFERENCES "public"."product"("id") ON UPDATE restrict ON DELETE restrict);
CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updated_at"()
  RETURNS TRIGGER AS $$
  DECLARE
    _new record;
  BEGIN
    _new := NEW;
    _new."updated_at" = NOW();
    RETURN _new;
  END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER "set_public_order_detail_updated_at"
  BEFORE UPDATE ON "public"."order_detail"
  FOR EACH ROW
  EXECUTE PROCEDURE "public"."set_current_timestamp_updated_at"();
COMMENT ON TRIGGER "set_public_order_detail_updated_at" ON "public"."order_detail" 
  IS 'trigger to set value of column "updated_at" to current timestamp on row update';

create index on order_detail (order_id);

create index on order_detail (product_id);

-- product_search function

create or replace function product_search(search text)
  returns setof product as $$
  select product.*
  from product
  where
  name ilike ('%' || search || '%')
$$ language sql stable;

-- product_search_slow function

create or replace function product_search_slow(search text, wait real)
  returns setof product as $$
  select product.*
  from product, pg_sleep(wait)
  where
  name ilike ('%' || search || '%')
$$ language sql stable;

-- non_negative_price constraint

alter table "public"."product" add constraint "non_negative_price" check (price > 0);

-- index account(name)

create index if not exists account_name_idx on account (name);

-- status enum

CREATE TYPE status AS ENUM ('new', 'processing', 'fulfilled');

-- add status to order table

alter table "public"."order" add column "status" status null;

create index on "order" (status);

-- region dictionary table

create table if not exists region (
  value text primary key,
  description text);

-- add region to order

alter table "public"."order" add column "region" Text
 null;

alter table "public"."order"
  add constraint "order_region_fkey"
  foreign key ("region")
  references "public"."region"
  ("value") on update restrict on delete restrict;

create index on "order" (region);
#+end_src

*** Insert Sample Data

[[https://tinyurl.com/2t32axzh]]

#+begin_src sql
-- -*- sql-product: postgres; -*-
insert into account (name) values ('Christel Seaborn');
insert into account (name) values ('Emalia Oliveras');
insert into account (name) values ('Arin Maker');
insert into account (name) values ('Gregor Gwilliam');
insert into account (name) values ('Calypso Meyer');

insert into product (name, price) values ('Plastic Wrap', 71);
insert into product (name, price) values ('Arizona - Green Tea', 377);
insert into product (name, price) values ('Wine - Prosecco Valdobienne', 220);
insert into product (name, price) values ('Sproutsmustard Cress', 771);
insert into product (name, price) values ('Spinach - Baby', 740);

with
  account as (
    select
      account.id,
      name,
      (random()*5)::int orders
      from account)
    insert into "order" (account_id)
select
  account_id
  from (
    select
      account.id account_id,
      row_number() over (partition by account.id order by account.name) ordinal
      from account, generate_series(1, 5)) orders
       join account on account.id = orders.account_id
	   and orders.ordinal <= account.orders;

with
  "order" as (
    select
      "order".id,
      (random()*9 + 1)::int items
      from "order")
    insert into order_detail (order_id, product_id, units)
select
  order_id,
  product_id,
  (random()*9 + 1)::int units
  from (
    select
      "order".id order_id,
      product.id product_id,
      row_number() over (partition by "order".id) ordinal
      from "order", product) user_item
       join "order" on "order".id = user_item.order_id
	   and user_item.ordinal <= "order".items;

update "order" set status = ((array['new', 'processing', 'fulfilled'])[floor(random()*3+1)])::status;

insert into region (value, description)
values
  ('NORTHEAST', 'New England'),
  ('MIDWEST', 'Great Lakes'),
  ('SOUTH', 'Dixie'),
  ('PLAINS', 'Great Plains'),
  ('APPALACHIA', 'Pennsylvania and West Virginia'),
  ('MOUNTAIN', 'Rocky Mountains'),
  ('NORTHWEST', 'Rainy'),
  ('WEST', 'California'),
  ('SOUTHWEST', 'Cacti');

update "order" set region = ((array[
  'NORTHEAST',
  'MIDWEST',
  'SOUTH',
  'PLAINS',
  'APPALACHIA',
  'MOUNTAIN',
  'NORTHWEST',
  'WEST',
  'SOUTHWEST'
  ])[floor(random()*9+1)])::text;

commit;
#+end_src
