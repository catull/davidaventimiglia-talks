# -*- mode: org; -*-

#+STARTUP: indent

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_DEFAULT_SLIDE_BACKGROUND: ./slide_background.png
#+REVEAL_INIT_OPTIONS: transition:'none', controlsLayout:'edges', progress:false, controlsTutorial:false
#+REVEAL_THEME: black
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./slide_background.png
#+REVEAL_PLUGINS: (highlight)

#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:nil title:t toc:nil todo:t |:t
#+title: +Data-First+ Domain-Driven GraphQL
#+subtitle: Teach the Controversy!
#+date: <2024-07-10 Wed>
#+author: David A. Ventimiglia
#+email: davidaventimiglia@hasura.io
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.3 (Org mode 9.6.15)
#+cite_export:

* 
#+CAPTION: https://tinyurl.com/dventimihasura
#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:qrcode_github.com.png]]

* Abstract

#+ATTR_HTML: :width 100%
#+begin_quote
There is a debate in the GraphQL community between "schema-first" and
"code-first" development. Yet, there is a third way: data-first
GraphQL APIs. This is where principles and pragmatism meet. "Do not
Repeat Yourself", "Domain-Driven Design," and "Data-Driven
Development" are important principles blah blah blah...
#+end_quote

* In a Nutshell

We think there's a better way, but hey, /maybe we're wrong!/

* What is GraphQL?

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

- Query Language
- Schema
  - Types
    - Fields
      - Types
- Sound familiar? üõ¢

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%;">
[[file:GraphQL.png]]

#+REVEAL_HTML: </div>

** History

- 2012 - Facebook created GraphQL to support its shift from web to
  mobile.
- 2015 - Facebook revamped GraphQL and released it to the community
  as an open standard.
- 2016 - Apollo founded.
- 2017 - Hasura founded.
- 2014 - Grumbling about GraphQL reaches a crescendo.

** History

[[file:trends.png]]

* /WHAT/ is GraphQL?

- REST replacement?
- failed promise?
- snake oil? üêç

* How is it Implemented?

- schema-first :: Write a schema, then write resolvers.
- code-first :: Just write resolvers.

** Resolvers

#+begin_quote
Each field on each type is backed by a function called the resolver
which is provided by the GraphQL server developer. When a field is
executed, the corresponding resolver is called to produce the next
value.
#+end_quote
cf. [[https://graphql.org/learn/execution/][graphql.org]]

** Trivial Resolvers

#+begin_quote
many GraphQL libraries will let you omit [simple] resolvers and will
just assume that if a resolver isn‚Äôt provided for a field, that a
property of the same name should be read and returned
#+end_quote
cf. [[https://graphql.org/learn/execution/][graphql.org]]

* /HOW/ is it Implemented?

by writing a lot of code

** GraphQL in Java

1. Create a Spring Boot application.
2. Write schema.
3. Write models.
4. Write mappings.
5. Write tests.

** GraphQL in Java

- [[https://www.graphql-java.com/][graphql-java]] :: low-level foundation
- [[https://netflix.github.io/dgs/][Netflix DGS]] :: high-level framework
- [[https://spring.io/projects/spring-graphql][Spring GraphQL]] :: high-level framework

** Schema File

#+begin_src graphql
type Query {
  account(limit: Int): [account]!
  account_by_pk(id: ID): account
  order(limit: Int): [order]!
}
type account {
  id: ID
  name: String
  orders(limit: Int): [order]!
}
type order {
  id: ID
  account_id: ID
  status: String
  account: account!
}
#+end_src

** graphql-java

#+begin_src java
DataFetcher productsDataFetcher = new DataFetcher<List<ProductDTO>>() {
    @Override
    public List<ProductDTO> get(DataFetchingEnvironment environment) {
        DatabaseSecurityCtx ctx = environment.getContext();
        List<ProductDTO> products;
        String match = environment.getArgument("match");
        if (match != null) {
            products = fetchProductsFromDatabaseWithMatching(ctx, match);
        } else {
            products = fetchAllProductsFromDatabase(ctx);
        }
        return products;
    }
};
#+end_src

** Netflix DGS

#+begin_src java
@DgsComponent
public class ShowDataFetcher {
    @DgsData(parentType = "Query", field = "shows")
    public List<Show> shows() {
        return shows;
    }
}
#+end_src

** Spring GraphQL

#+begin_src java
  @Controller
  public class GreetingController {
      @QueryMapping
      public String greeting(@Argument String name) {
          return "Hello, " + name + "!";
      }
  }
#+end_src

** Netflix DGS & Spring GraphQL

#+begin_quote
Soon after we open-sourced the DGS Framework, we learned about
parallel efforts by the Spring team to develop a GraphQL framework for
Spring Boot...We now have two competing frameworks that solve the same
problem for our users.
#+end_quote
cf. [[https://netflixtechblog.medium.com/a-tale-of-two-frameworks-the-domain-graph-service-framework-meets-spring-graphql-f8237f09c389][Netflix Technology Blog]]

** Netflix DGS & Spring GraphQL

#+begin_quote
Today, new users must choose between the DGS Framework and Spring
GraphQL...For the DGS and Spring GraphQL maintainers, it would be far
more effective to collaborate on features and improvements and provide
more robust solutions for the GraphQL community as a whole.
#+end_quote
cf. [[https://netflixtechblog.medium.com/a-tale-of-two-frameworks-the-domain-graph-service-framework-meets-spring-graphql-f8237f09c389][Netflix Technology Blog]]

** Netflix DGS & Spring GraphQL

- CHALLENGE :: Read the Netflix Technlogy Blog [[https://netflixtechblog.medium.com/a-tale-of-two-frameworks-the-domain-graph-service-framework-meets-spring-graphql-f8237f09c389][article]] and see if you
  can determine why you wouldn't just use Spring for GraphQL for a /de
  novo/ project.

* What is the problem?

- security :: exposes bad stuff to enemies
- performance :: exposes bad performance even to friends
- complexity :: exposes enormous complexity to implementers

** Security

- Deep Queries :: /Confidentiality, Availability/
- Recursive Queries :: /Availability/
- Unbounded Queries :: /Confidentiality, Availability/
- Malicious Queries :: /Confidentiality, Integrity/
- Batch Requests :: /Confidentiality, Availability/

*** Deep / Recursive Queries

#+begin_src graphql
  query {
    author(id: 42) {
      posts {
        author {...and so on...
        }
      }
    }
  }
#+end_src

*** Unbounded / Large Queries

#+begin_src graphql
  query {
    authors(first: 1000) {
      name
      posts(last: 100) {
        title
        content
      }
    }
  }
#+end_src

*** Malicious Queries

#+begin_src graphql
  query User {
    user (id: "User*") {
      email
      id 
    }
  }
#+end_src

*** Batch Requests

#+begin_src graphql
  query MaliciousQuery {
    alias1: fieldName { subField1 subField2 ...}
    alias2: fieldName { subField1 subField2 ...}
    ...
    alias10: fieldName { subField1 subField2 ...}
    ...
    alias100: fieldName { subField1 subField2 ...
    ...
    alias1000: fieldName { subField1 subField2 ...}
    ...
  }
#+end_src

* /WHAT/ is the problem?

#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:twitter.png]]

** Performance

#+begin_src graphql
  query {
    Artist(limit: 10) {
      ArtistId
      Album {
        AlbumId
        Track {
          TrackId
...
#+end_src

1. Get up to 10 ~Artist~ entry.
2. For each ~Artist~, get all of the related ~Album~ entries.
3. For each ~Album~, get all of the related ~Track~ entries.
4. For each entry, just get its identifier field:  ~ArtistId~,
   ~AlbumId~, ~TrackId~.
5. This query is nested 2 levels below ~Artist~.  Let $~n=2~$.
6. ~Album~ is a [[https://spec.graphql.org/October2021/#sec-Wrapping-Types][List]] wrapping type on ~Artist~, as is ~Track~ is a
   [[https://spec.graphql.org/October2021/#sec-Wrapping-Types][List]] wrapping type on ~Album~.  Suppose the typical [[https://en.wikipedia.org/wiki/Cardinality][cardinality]] is
   $m$.

** Performance

- The N+1 Problem :: resolvers, calls, and queries scales as $m^n$,
  which is exponential in $n$.
  
** Performance?

- The N+1 Problem? :: so will the data volume

* What is the solution?

Use [[https://hasura.io/][Hasura]], or [[https://www.graphile.org/postgraphile/][PostGraphile]], or +Prisma+, or even [[https://postgrest.org/][PostgREST]].

* /WHAT/ is the solution?

Domain-Driven development

* What is Domain-Driven Development?

#+begin_quote
the domain-driven approach translates the richness of your domain,
primarily the storage layer (databases), to your API
#+end_quote
/cf./ [[https://hasura.io/blog/@praveenweb][Praveen Durairaju]]

* /WHAT/ is Domain-Driven Development?

Compile (or translate, or transpile, or whatever) a GraphQL query into
a SQL (for example) query.  Use this to "generate" a GraphQL API from
the underlying database. 

* Isn't that nuts?

Hear me out.

* 

#+ATTR_HTML: :width 70%
#+ATTR_HTML: :height 70%
[[file:Intermission_LCCN2012645960.jpg]]

* OK, but what is the benefit?

/If/ you already have a powerful underlying database and query
language /then/ using it can help address the problems of security,
performance, and complexity.

* /OBJECTION!/  This exposes the database.

No. It only exposes the objects available to the role (provided the
database has Role-Based Access Controls, that is).

* /OBJECTION!/  The API should be independent.

No. That's a matter of judgement.  It /can/ be, but it need not
/necessarily/ be.  When independence is needed, the database itself
can often furnish that independence.

* /OBJECTION!/  Dataloaders fix the performance problem.

No. Dataloaders /address/ the performance problem.

* /OBJECTION!/  Java frameworks fix the complexity problem.

No. Java frameworks like [[https://github.com/introproventures/graphql-jpa-query][graphql-jpa-query]] and [[https://github.com/leangen/graphql-spqr][graphql-spqr]] /address/
the complexity problem.

* /OBJECTION!/  Code is necessary for business logic.

Yes and no. Data validation and Data Transformation can often be
addressed by SQL (for example).  Side-Effects, on the other hand, are
a different story.

* Domain-Driven GraphQL

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">

- Resolvers are easy, flexible, tedious, and inefficient.
- Dataloaders are efficient, difficult, inflexible.
- Toss in NFRs and that's a lot of code.

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%;">

- [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]] your code and you're well on your way to Hasura.
- That's good!  [[https://en.wiktionary.org/wiki/TMTOWTDI][TMTOWTDI]] after all.
- OTOH, you might just use Hasura and get on with your life.

#+REVEAL_HTML: </div>

* Domain-Driven GraphQL

- Consider... ::
  1. using Hasura or PostGraphile if you're willing to not write code.
  2. using [[https://github.com/introproventures/graphql-jpa-query][graphql-jpa-query]] if you must write code and want something new.
  3. using [[https://github.com/leangen/graphql-spqr][graphql-spqr]] if you must write code and want something old.
  4. using whatever and rewrite Hasura in Java!

* Domain-Driven GraphQL

#+begin_quote
[databases] have long been the gold standard of expressiveness of data
requirements ‚Äì any sufficiently expressive API will begin to look like
SQL ‚Äì there‚Äôs no alternative. So, instead of reinventing the wheel, a
domain-driven approach mirrors whatever flexibility your domain allows
in terms of access patterns/capabilities.
#+end_quote
/cf./ [[https://hasura.io/blog/@praveenweb][Praveen Durairaju]]

* References

- [[https://hasura.io/blog/compile-dont-resolve-designing-a-feature-rich-high-performance-domain-driven-graphql-api][Compile, don't resolve: Designing a feature-rich, high-performance, domain-driven GraphQL API]]
- [[https://thenewstack.io/is-graphql-over-or-do-we-just-need-to-rethink-it/][Is GraphQL Over or Do We Just Need to Rethink It?]]
- [[https://hasura.io/blog/the-ultimate-graphql-for-java-guide][The Ultimate GraphQL for Java Guide]]
- [[https://hasura.io/blog/building-a-graphql-server-with-netflix-dgs-an-unfiltered-review][Building a GraphQL server with Netflix DGS: An unfiltered review]]
- [[https://grafast.org/grafast][Gra/fast/ introduction]]
- [[https://x.com/schrockn/status/1721340874771062933][Nick Schrock on Twitter]]
- [[https://netflixtechblog.medium.com/a-tale-of-two-frameworks-the-domain-graph-service-framework-meets-spring-graphql-f8237f09c389][A Tale of Two Frameworks: The Domain Graph Service Framework Meets Spring GraphQL]]

* 
#+CAPTION: https://tinyurl.com/dventimihasura
#+ATTR_HTML: :width 40%
#+ATTR_HTML: :height 40%
[[file:qrcode_github.com.png]]
